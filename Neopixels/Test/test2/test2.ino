#include <FastLED.h>

// How many leds in your strip?
#define NUM_LEDS 64
#define BRIGHTNESS 5

#define uS_TO_S_FACTOR 1000000
#define TIME_TO_SLEEP  10 * 60

#define MY_DELAY 1000

// For led chips like WS2812, which have a data line, ground, and power, you just
// need to define DATA_PIN.  For led chipsets that are SPI based (four wires - data, clock,
// ground, and power), like the LPD8806 define both DATA_PIN and CLOCK_PIN
// Clock pin only needed for SPI based chipsets when not using hardware SPI
#define DATA_PIN 27
//#define CLOCK_PIN 13

// Define the array of leds
CRGB leds[NUM_LEDS];

uint32_t heart[] = {
  0xd4cfcf, 0x894647, 0x812f2f, 0xac8e8e, 0xd0cfcf, 0x823031, 0x843737, 0xbcacac, 
  0x953939, 0xf13a3a, 0xfd9a99, 0xbf1d1d, 0x8b2222, 0xfd0201, 0xfa0201, 0xa91818, 
  0x932b2b, 0xfcafaf, 0xfd4746, 0xf90403, 0xf30302, 0xfe0201, 0xfe0201, 0xbb0404, 
  0x942d2d, 0xf82a29, 0xfe0201, 0xfe0201, 0xfe0201, 0xfe0201, 0xfd0201, 0xb40c0c, 
  0xc5bdbd, 0xa71d1d, 0xfe0201, 0xfe0201, 0xfe0201, 0xfe0201, 0xd30b0b, 0xa99192, 
  0xf9f9f9, 0xb19999, 0xc31010, 0xfb0201, 0xfe0201, 0xee0302, 0xa85a59, 0xf0f0f0, 
  0xffffff, 0xf8f8f8, 0xaf8e8e, 0xd01212, 0xf30202, 0x994243, 0xe2dcdc, 0xfefefe, 
  0xfefefe, 0xffffff, 0xf7f6f7, 0xaa7979, 0x953334, 0xe5e4e4, 0xfefefe, 0xfefefe
};

uint32_t pika[] = {
  0xf6f6f6, 0xe0e0e0, 0x7d7d7d, 0xe3e3e3, 0xf6f6f6, 0xf6f6f6, 0xc0b8a4, 0xa58146, 
  0xf6f6f6, 0xbdb8a7, 0x7b6526, 0xc0bfba, 0xc2bead, 0x64605d, 0xae7934, 0xc97420, 
  0xcdcbc2, 0xbea952, 0xf2ca30, 0xc8ae3d, 0xd8b02d, 0x473322, 0xa35c1e, 0xa68b74, 
  0x867f5f, 0xe4c43a, 0xfcd633, 0xfcd633, 0xfbc72e, 0x403225, 0x744721, 0xa58f7b, 
  0xa99e72, 0xd6b136, 0xac973e, 0xe2802e, 0xf79721, 0x684220, 0x918d89, 0xf4f4f4, 
  0xa4a091, 0xa77624, 0xdd9f24, 0xdc7c23, 0xcb7217, 0x8f5420, 0xbab4ae, 0xf6f6f6, 
  0xc4c4c4, 0x766956, 0x8d814c, 0xb48329, 0xc47116, 0x976233, 0xd1cbc7, 0xf6f6f6, 
  0xf5f5f5, 0xf0f0f0, 0xefefef, 0x8e8a81, 0x8c671f, 0x806f61, 0xe2e2e2, 0xf6f6f6
};

uint32_t pat1[] = {
  0xde9cff, 0xde9cff, 0xde9cff, 0xde9cff, 0xde9cff, 0xde9cff, 0xde9cff, 0xde9cff, 
  0xde9cff, 0xde9cff, 0x8fa0ff, 0x8fa0ff, 0x8fa0ff, 0x8fa0ff, 0xde9cff, 0xde9cff, 
  0xde9cff, 0xde9cff, 0x8fa0ff, 0x55ccc8, 0x55ccc8, 0x8fa0ff, 0xde9cff, 0xde9cff, 
  0xde9cff, 0xde9cff, 0x8fa0ff, 0x55ccc8, 0x55ccc8, 0x8fa0ff, 0xde9cff, 0xde9cff, 
  0xde9cff, 0xde9cff, 0x8fa0ff, 0x55ccc8, 0x55ccc8, 0x8fa0ff, 0xde9cff, 0xde9cff, 
  0xde9cff, 0x8fa0ff, 0x55ccc8, 0x55ccc8, 0x55ccc8, 0x8fa0ff, 0xde9cff, 0xde9cff, 
  0x8fa0ff, 0x55ccc8, 0x55ccc8, 0x55ccc8, 0x55ccc8, 0x8fa0ff, 0xde9cff, 0xde9cff, 
  0xde9cff, 0x8fa0ff, 0x8fa0ff, 0x8fa0ff, 0x8fa0ff, 0x8fa0ff, 0xde9cff, 0xde9cff
};

uint32_t pat2[] = {
  0x742fff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x742fff, 
  0xffffff, 0x742fff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x742fff, 0xffffff, 
  0xffffff, 0xffffff, 0x742fff, 0xffffff, 0xffffff, 0x742fff, 0xffffff, 0xffffff, 
  0xffffff, 0xffffff, 0xffffff, 0x742fff, 0x742fff, 0xffffff, 0xffffff, 0xffffff, 
  0xffffff, 0xffffff, 0xffffff, 0x742fff, 0x742fff, 0xffffff, 0xffffff, 0xffffff, 
  0xffffff, 0xffffff, 0x742fff, 0xffffff, 0xffffff, 0x742fff, 0xffffff, 0xffffff, 
  0xffffff, 0x742fff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x742fff, 0xffffff, 
  0x742fff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x742fff
};

uint32_t hi[] = {
  0xff46be, 0xff46be, 0xca75ff, 0xff46be, 0xff46be, 0xff46be, 0xff46be, 0xff46be, 
  0xff46be, 0x3aff6b, 0xca75ff, 0xca75ff, 0x3aff6b, 0xca75ff, 0xca75ff, 0xff46be, 
  0xff46be, 0x3aff6b, 0xca75ff, 0xca75ff, 0x3aff6b, 0xca75ff, 0x3aff6b, 0xff46be, 
  0xff46be, 0x3aff6b, 0xca75ff, 0xca75ff, 0x3aff6b, 0xca75ff, 0xca75ff, 0xff46be, 
  0xff46be, 0x3aff6b, 0x3aff6b, 0x3aff6b, 0x3aff6b, 0xca75ff, 0x3aff6b, 0xff46be, 
  0xff46be, 0x3aff6b, 0xca75ff, 0xca75ff, 0x3aff6b, 0xca75ff, 0x3aff6b, 0xff46be, 
  0xff46be, 0x3aff6b, 0xca75ff, 0xca75ff, 0x3aff6b, 0xca75ff, 0x3aff6b, 0xff46be, 
  0xff46be, 0xff46be, 0xff46be, 0xff46be, 0xff46be, 0xff46be, 0xff46be, 0xff46be
};

uint32_t hi2[] = {
  0x75c8ff, 0x75c8ff, 0x75c8ff, 0x75c8ff, 0x75c8ff, 0x75c8ff, 0x75c8ff, 0x75c8ff, 
  0x75c8ff, 0x3aff6b, 0xfff0a1, 0xfff0a1, 0x3aff6b, 0xfff0a1, 0xfff0a1, 0x75c8ff, 
  0x75c8ff, 0x3aff6b, 0xfff0a1, 0xfff0a1, 0x3aff6b, 0xfff0a1, 0x3aff6b, 0x75c8ff, 
  0x75c8ff, 0x3aff6b, 0xfff0a1, 0xfff0a1, 0x3aff6b, 0xfff0a1, 0xfff0a1, 0x75c8ff, 
  0x75c8ff, 0x3aff6b, 0x3aff6b, 0x3aff6b, 0x3aff6b, 0xfff0a1, 0x3aff6b, 0x75c8ff, 
  0x75c8ff, 0x3aff6b, 0xfff0a1, 0xfff0a1, 0x3aff6b, 0xfff0a1, 0x3aff6b, 0x75c8ff, 
  0x75c8ff, 0x3aff6b, 0xfff0a1, 0xfff0a1, 0x3aff6b, 0xfff0a1, 0x3aff6b, 0x75c8ff, 
  0x75c8ff, 0x75c8ff, 0x75c8ff, 0x75c8ff, 0x75c8ff, 0x75c8ff, 0x75c8ff, 0x75c8ff
};

uint32_t hi3[] = {
  0x75c8ff, 0x75c8ff, 0x75c8ff, 0x75c8ff, 0x75c8ff, 0x75c8ff, 0x75c8ff, 0x75c8ff, 
  0x75c8ff, 0x2230ff, 0xfff0a1, 0xfff0a1, 0x2230ff, 0xfff0a1, 0xfff0a1, 0x75c8ff, 
  0x75c8ff, 0x2230ff, 0xfff0a1, 0xfff0a1, 0x2230ff, 0xfff0a1, 0x3aff6b, 0x75c8ff, 
  0x75c8ff, 0x2230ff, 0xfff0a1, 0xfff0a1, 0x2230ff, 0xfff0a1, 0xfff0a1, 0x75c8ff, 
  0x75c8ff, 0x2230ff, 0x2230ff, 0x2230ff, 0x2230ff, 0xfff0a1, 0x3aff6b, 0x75c8ff, 
  0x75c8ff, 0x2230ff, 0xfff0a1, 0xfff0a1, 0x2230ff, 0xfff0a1, 0x3aff6b, 0x75c8ff, 
  0x75c8ff, 0x2230ff, 0xfff0a1, 0xfff0a1, 0x2230ff, 0xfff0a1, 0x3aff6b, 0x75c8ff, 
  0x75c8ff, 0x75c8ff, 0x75c8ff, 0x75c8ff, 0x75c8ff, 0x75c8ff, 0x75c8ff, 0x75c8ff
};

uint32_t M[] = {
  0xff4a4a, 0xff4a4a, 0xff4a4a, 0xff4a4a, 0xff4a4a, 0xff4a4a, 0xff4a4a, 0xff4a4a, 
  0xff4a4a, 0xffff00, 0xff4a4a, 0xff4a4a, 0xff4a4a, 0xff4a4a, 0xffff00, 0xff4a4a, 
  0xff4a4a, 0xffff00, 0xffff00, 0xff4a4a, 0xff4a4a, 0xffff00, 0xffff00, 0xff4a4a, 
  0xff4a4a, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xff4a4a, 
  0xff4a4a, 0xffff00, 0xff4a4a, 0xffff00, 0xffff00, 0xff4a4a, 0xffff00, 0xff4a4a, 
  0xff4a4a, 0xffff00, 0xff4a4a, 0xff4a4a, 0xff4a4a, 0xff4a4a, 0xffff00, 0xff4a4a, 
  0xff4a4a, 0xffff00, 0xff4a4a, 0xff4a4a, 0xff4a4a, 0xff4a4a, 0xffff00, 0xff4a4a, 
  0xff4a4a, 0xff4a4a, 0xff4a4a, 0xff4a4a, 0xff4a4a, 0xff4a4a, 0xff4a4a, 0xff4a4a 
};

uint32_t V[] = {
  0xff4a4a, 0xff4a4a, 0xff4a4a, 0xff4a4a, 0xff4a4a, 0xff4a4a, 0xff4a4a, 0xff4a4a, 
  0xff4a4a, 0xffff00, 0xff4a4a, 0xff4a4a, 0xff4a4a, 0xff4a4a, 0xffff00, 0xff4a4a, 
  0xff4a4a, 0xffff00, 0xff4a4a, 0xff4a4a, 0xff4a4a, 0xff4a4a, 0xffff00, 0xff4a4a, 
  0xff4a4a, 0xff4a4a, 0xffff00, 0xff4a4a, 0xff4a4a, 0xffff00, 0xff4a4a, 0xff4a4a, 
  0xff4a4a, 0xff4a4a, 0xffff00, 0xff4a4a, 0xff4a4a, 0xffff00, 0xff4a4a, 0xff4a4a, 
  0xff4a4a, 0xff4a4a, 0xff4a4a, 0xffff00, 0xffff00, 0xff4a4a, 0xff4a4a, 0xff4a4a, 
  0xff4a4a, 0xff4a4a, 0xff4a4a, 0xffff00, 0xffff00, 0xff4a4a, 0xff4a4a, 0xff4a4a, 
  0xff4a4a, 0xff4a4a, 0xff4a4a, 0xff4a4a, 0xff4a4a, 0xff4a4a, 0xff4a4a, 0xff4a4a
};

uint32_t P[] = {
  0xff4a4a, 0xff4a4a, 0xff4a4a, 0xff4a4a, 0xff4a4a, 0xff4a4a, 0xff4a4a, 0xff4a4a, 
  0xff4a4a, 0xff4a4a, 0xff4a4a, 0xffff00, 0xffff00, 0xff4a4a, 0xff4a4a, 0xff4a4a, 
  0xff4a4a, 0xff4a4a, 0xffff00, 0xff4a4a, 0xff4a4a, 0xffff00, 0xff4a4a, 0xff4a4a, 
  0xff4a4a, 0xff4a4a, 0xffff00, 0xff4a4a, 0xff4a4a, 0xffff00, 0xff4a4a, 0xff4a4a, 
  0xff4a4a, 0xff4a4a, 0xffff00, 0xffff00, 0xffff00, 0xff4a4a, 0xff4a4a, 0xff4a4a, 
  0xff4a4a, 0xff4a4a, 0xffff00, 0xff4a4a, 0xff4a4a, 0xff4a4a, 0xff4a4a, 0xff4a4a, 
  0xff4a4a, 0xff4a4a, 0xffff00, 0xff4a4a, 0xff4a4a, 0xff4a4a, 0xff4a4a, 0xff4a4a, 
  0xff4a4a, 0xff4a4a, 0xff4a4a, 0xff4a4a, 0xff4a4a, 0xff4a4a, 0xff4a4a, 0xff4a4a
};

uint32_t D[] = {
  0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 
  0x7f290c, 0xebb2c3, 0xebb2c3, 0xebb2c3, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 
  0x7f290c, 0xebb2c3, 0x7f290c, 0x7f290c, 0xebb2c3, 0x7f290c, 0x7f290c, 0x7f290c, 
  0x7f290c, 0xebb2c3, 0x7f290c, 0x7f290c, 0x7f290c, 0xebb2c3, 0x7f290c, 0x7f290c, 
  0x7f290c, 0xebb2c3, 0x7f290c, 0x7f290c, 0x7f290c, 0xebb2c3, 0x7f290c, 0x7f290c, 
  0x7f290c, 0xebb2c3, 0x7f290c, 0x7f290c, 0xebb2c3, 0x7f290c, 0x7f290c, 0x7f290c, 
  0x7f290c, 0xebb2c3, 0xebb2c3, 0xebb2c3, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 
  0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c
};

uint32_t E[] = {
  0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 
  0x7f290c, 0xebb2c3, 0xebb2c3, 0xebb2c3, 0xebb2c3, 0xebb2c3, 0x7f290c, 0x7f290c, 
  0x7f290c, 0xebb2c3, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 
  0x7f290c, 0xebb2c3, 0xebb2c3, 0xebb2c3, 0xebb2c3, 0x7f290c, 0x7f290c, 0x7f290c, 
  0x7f290c, 0xebb2c3, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 
  0x7f290c, 0xebb2c3, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 
  0x7f290c, 0xebb2c3, 0xebb2c3, 0xebb2c3, 0xebb2c3, 0xebb2c3, 0x7f290c, 0x7f290c, 
  0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c
};

uint32_t F[] = {
  0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 
  0x7f290c, 0xebb2c3, 0xebb2c3, 0xebb2c3, 0xebb2c3, 0xebb2c3, 0x7f290c, 0x7f290c, 
  0x7f290c, 0xebb2c3, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 
  0x7f290c, 0xebb2c3, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 
  0x7f290c, 0xebb2c3, 0xebb2c3, 0xebb2c3, 0xebb2c3, 0x7f290c, 0x7f290c, 0x7f290c, 
  0x7f290c, 0xebb2c3, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 
  0x7f290c, 0xebb2c3, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 
  0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c
};

uint32_t A[] = {
  0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 
  0x7f290c, 0x7f290c, 0x7f290c, 0xebb2c3, 0xebb2c3, 0x7f290c, 0x7f290c, 0x7f290c, 
  0x7f290c, 0x7f290c, 0xebb2c3, 0x7f290c, 0x7f290c, 0xebb2c3, 0x7f290c, 0x7f290c, 
  0x7f290c, 0x7f290c, 0xebb2c3, 0x7f290c, 0x7f290c, 0xebb2c3, 0x7f290c, 0x7f290c, 
  0x7f290c, 0xebb2c3, 0xebb2c3, 0xebb2c3, 0xebb2c3, 0xebb2c3, 0xebb2c3, 0x7f290c, 
  0x7f290c, 0xebb2c3, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 0xebb2c3, 0x7f290c, 
  0x7f290c, 0xebb2c3, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 0xebb2c3, 0x7f290c, 
  0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c
};

uint32_t T[] = {
  0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 
  0x7f290c, 0xebb2c3, 0xebb2c3, 0xebb2c3, 0xebb2c3, 0xebb2c3, 0xebb2c3, 0x7f290c, 
  0x7f290c, 0xebb2c3, 0xebb2c3, 0xebb2c3, 0xebb2c3, 0xebb2c3, 0xebb2c3, 0x7f290c, 
  0x7f290c, 0x7f290c, 0x7f290c, 0xebb2c3, 0xebb2c3, 0x7f290c, 0x7f290c, 0x7f290c, 
  0x7f290c, 0x7f290c, 0x7f290c, 0xebb2c3, 0xebb2c3, 0x7f290c, 0x7f290c, 0x7f290c, 
  0x7f290c, 0x7f290c, 0x7f290c, 0xebb2c3, 0xebb2c3, 0x7f290c, 0x7f290c, 0x7f290c, 
  0x7f290c, 0x7f290c, 0x7f290c, 0xebb2c3, 0xebb2c3, 0x7f290c, 0x7f290c, 0x7f290c, 
  0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c, 0x7f290c
};






void setup() { 
    // Uncomment/edit one of the following lines for your leds arrangement.
    // ## Clockless types ##
    FastLED.addLeds<NEOPIXEL, DATA_PIN>(leds, NUM_LEDS);  // GRB ordering is assumed
    FastLED.setBrightness(BRIGHTNESS);
    printImage(heart);
}

void loop() { 
  for(int i = 0; i < 50; i++){
    printImage(heart);
    delay(MY_DELAY);
    printImage(pika);
    delay(MY_DELAY);
  
    printImage(pat1);
    delay(MY_DELAY);
  
    printImage(pat2);
    delay(MY_DELAY);
  
    printImage(hi);
    delay(MY_DELAY);
  
    printImage(hi2);
    delay(MY_DELAY);
  
     printImage(hi3);
    delay(MY_DELAY);
  
     printImage(M);
    delay(MY_DELAY);
  
     printImage(V);
    delay(MY_DELAY);
  
     printImage(P);
    delay(MY_DELAY);
  
    printImage(pika);
    delay(MY_DELAY);
  
     printImage(D);
    delay(MY_DELAY);
  
     printImage(E);
    delay(MY_DELAY);
  
     printImage(F);
    delay(MY_DELAY);
  
     printImage(E);
    delay(MY_DELAY);
  
     printImage(A);
    delay(MY_DELAY);
  
     printImage(T);
    delay(MY_DELAY);
  }
  for(int i = 0; i < 5; i++){
    fillScreen(0xA52A2A);
    delay(100);
    fillScreen(0x00008B);
    delay(100);
    fillScreen(0x006400);
    delay(100);
    fillScreen(0xFF1493);
    delay(100);
  }

  for(int i = 0 ; i < 100; i++){
    uint32_t randomColor = (uint32_t)random(0, 0xffffff);
    fillScreen(randomColor);
    delay(100);
  }

  fillScreen(0);
  esp_sleep_enable_timer_wakeup(TIME_TO_SLEEP * uS_TO_S_FACTOR);
  esp_deep_sleep_start();

}

void fillScreen(uint32_t color){
  for(int i = 0; i < NUM_LEDS; i++){
    leds[i] = color;
  }

  FastLED.show();
}

void printImage(uint32_t image[]){
  for(int i = 0; i < NUM_LEDS; i++){
    leds[i] = image[i];
  }
  FastLED.show();
}
